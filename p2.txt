암호화될 텍스트 문서 : 프로젝트 폴더에 생성.
이 파일의 이름 : p1.txt
package aes;

import java.security.Key;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.spec.AlgorithmParameterSpec;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class CipherUtil {
	private static byte[] randomKey;
	//초기화벡터 : 첫번째 블럭에 값 제공
	//CBC 모드 : 블럭암호화시 앞블럭의 암호문이 뒤 블럭의 암호화에 영향을 줌
	//패딩방법  : 마자막블럭의 자리수를 지정된 블럭의 크기만큼 채우기위한 방법 설정
	private final static byte[] iv = new byte[] { 
			(byte)0x8E,0x12,0x39,(byte)0x9,
			      0x07,0x72,0x6F,(byte)0x5A,
			(byte)0x8E,0x12,0x39,(byte)0x9,
				  0x07,0x72,0x6F,(byte)0x5A};
	static Cipher cipher; //암호처리 객체
	static {
		try {
			cipher = Cipher.getInstance("AES/CBC/PKCS5Padding"); //알고리즘/블럭암호화모드/패딩방법
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	public static byte[] getRandomKey(String algo) throws NoSuchAlgorithmException {
		//algo : 암호알고리즘이름 => AES
		//keyGen : 암호 알고리즘에 맞는 키 생성을 위한 객체
		KeyGenerator keyGen = KeyGenerator.getInstance(algo);
		keyGen.init(128); //AES 알고리즘 키크기 : 128 ~ 196 비트 크기 가능
		SecretKey key = keyGen.generateKey(); //keyGen 객체에 설정된 내용으로 키 생성
		return key.getEncoded(); //byte[] 형태로 리턴
	}
	
	public static String encrypt(String plain1) {
		//plain : 암호화를 위한 평문
		byte[] cipherMsg = new byte[1024];
		try {
			//대칭키 : 암호화, 복호화키가 동일
			randomKey = getRandomKey("AES");
			//AES 알고리즘에서 사용할 KEY 객체로 생성
			Key key = new SecretKeySpec(randomKey, "AES");
			//CBC 방식에서 사용할 초기화 벡터값을 설정
			AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv);
			//Cipher.ENCRYPT_MODE(암호화처리) : 키,Iv 설정
			cipher.init(Cipher.ENCRYPT_MODE, key, paramSpec); //암호화를 위한 cipher 객체
			cipherMsg = cipher.doFinal(plain1.getBytes()); //암호화 실행
		} catch (Exception e) {
			e.printStackTrace();
		}
		return byteToHex(cipherMsg).trim(); //문자열로 암호문 리턴
	}
	// byte[] 데이터 => 16진수값을 가진 문자열 형태로 변형
	private static String byteToHex(byte[] cipherMsg) {
		if (cipherMsg == null) return null;
		String str = "";
		for (byte b : cipherMsg) {
			str += String.format("%02X", b); //각 바이트를 2자리 16진수로 생성
		}
		return str;
	}
	
	// cipherMsg : 8E60671501CC703B675135460D146B25C...
	// 암호화된 데이터를 평문으로 리턴
	public static String decrypt(String cipherMsg) {
		byte[] plainMsg = new byte[1024];
		try {
			//randomKey : 암호화에서 사용된 키값 
			Key key = new SecretKeySpec(randomKey, "AES"); //AES알고리즘엣 사용할 키 객체로 생성
			AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv); //CBC 모드에서 사용할 iv 설정
			//Cipher.DECRYPT_MODE : 복호화 기능
			cipher.init(Cipher.DECRYPT_MODE, key, paramSpec); // 복호화를 위한 객체 설정
			plainMsg = cipher.doFinal(hexToByte(cipherMsg.trim())); //복호화 실행
		} catch(Exception e) {
			e.printStackTrace();
		}
		return new String(plainMsg).trim(); //byte[]형태의 평문 => 문자열
	}
	//암호회된 문자열 => byte[] 값
	private static byte[] hexToByte(String str) {
		// str : 8E60671501CC703B675135460D146B25C...
		if (str == null || str.length() < 2 ) return null; //잘못된 데이터
		int len = str.length() / 2; //2개의 문자열데이터가 한바이트
		byte[] buf = new byte[len]; //7,....
		for (int i = 0; i < len; i++) {
			buf[i] = (byte) Integer.parseInt(str.substring(i * 2, i * 2 + 2), 16);
		}
		return buf;
	}

	
	
	public static String encrypt(String plain1, String key) {
		byte[] cipherMsg = new byte[1024];
		try {							//  byte[]      알고리즘
			Key genKey = new SecretKeySpec(makeKey(key), "AES");
			AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv); //128 비트 크기
			cipher.init(Cipher.ENCRYPT_MODE, genKey, paramSpec);
			cipherMsg = cipher.doFinal(plain1.getBytes()); //암호문
		} catch (Exception e) {
			e.printStackTrace();
		}
		return byteToHex(cipherMsg).trim(); 
	}
	//AES 알고리즘의 키크기 : 128비트 => 16바이트
	//					   128비트의 크기로 변경
	private static byte[] makeKey(String key) {
		//key : abc1234567
		int len = key.length();//10
		char ch ='A';
		for(int i = len; i < 16; i++) { //16바이트로 생성
			key += ch++; //abc1234567ABCDEF
		}
		return key.substring(0,16).getBytes(); //16바이트로 생성
	}
	

	public static String decrypt(String cipherMsg, String key) {
		byte[] plainMsg = new byte[1024];
		try {
			Key genKey = new SecretKeySpec(makeKey(key), "AES");
			AlgorithmParameterSpec paramSpec = new IvParameterSpec(iv); 
			cipher.init(Cipher.DECRYPT_MODE, genKey, paramSpec); 
			plainMsg = cipher.doFinal(hexToByte(cipherMsg.trim())); 
		} catch(Exception e) {
			e.printStackTrace();
		}
		return new String(plainMsg).trim(); 
	}

	public static String makehash(String msg) throws Exception {
		MessageDigest md = MessageDigest.getInstance("SHA-256");
		byte[] plain = msg.getBytes();
		byte[] hash = md.digest(plain);
		return byteToHex(hash);
	}
}
